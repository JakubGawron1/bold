use crate::prelude::*;

#[naked]
unsafe extern "C" fn _park_core() -> ! {
    asm!("1: wfi", "b 1b", options(noreturn))
}

pub unsafe fn init_multicore() {
    *(PhyAddr(0xe0).virt_mut() as *mut usize) = _park_core as usize & 0xffffffff;
    *(PhyAddr(0xe8).virt_mut() as *mut usize) = _park_core as usize & 0xffffffff;
    *(PhyAddr(0xf0).virt_mut() as *mut usize) = _park_core as usize & 0xffffffff;
}

#[naked]
#[no_mangle]
#[link_section = ".text.init"]
unsafe extern "C" fn _start() -> ! {
    asm!(
        "    // read cpu affinity, start core 0, halt rest",
        "    mrs     x1, mpidr_el1",
        "    and     x1, x1, #3",
        "    cbz     x1, 2f",
        "",
        "1:",
        "    // core affinity != 0, halt it",
        "    wfi",
        "    b       1b",
        "",
        "2:",
        "    // set the stack to start before our boot code",
        "    ldr     x1, =_start",
        "",
        "    // set up EL1",
        "    mrs     x3, CurrentEL",
        "    and     x3, x3, #12       // clear reserved bits",
        "",
        "    // running at EL3?",
        "    cmp     x3, #12",
        "    bne     5f",
        "    // should never be executed, just for completeness",
        "    mov     x2, #0x5b1",
        "    msr     scr_el3, x2",
        "    mov     x2, #0x3c9",
        "    msr     spsr_el3, x2",
        "    adr     x2, 5f",
        "    msr     elr_el3, x2",
        "    eret",
        "",
        "5:",
        "    // running at EL2?",
        "    cmp     x3, #4",
        "    beq     5f",
        "    msr     sp_el1, x1",
        "    // enable CNTP for EL1",
        "    mrs     x3, cnthctl_el2",
        "    orr     x3, x3, #3",
        "    msr     cnthctl_el2, x3",
        "    msr     cntvoff_el2, xzr",
        "    // enable AArch64 in EL1",
        "    mov     x3, #(1 << 31)    // AArch64",
        "    orr     x3, x3, #(1 << 1)   // SWIO hardwired on Pi3",
        "    msr     hcr_el2, x3",
        "    mrs     x3, hcr_el2",
        "    // Setup SCTLR access",
        "    mov     x2, #0x0800",
        "    movk    x2, #0x30d0, lsl #16",
        "    msr     sctlr_el1, x2",
        "// set up exception handlers",
        "    ldr     x2, =_vectors",
        "    mov     w2, w2", // FIXME: Truncate _vectors to 32bit, ignoring highmem
        "    msr     vbar_el1, x2",
        "    // change execution level to EL1",
        "    mov     x2, #0x3c4",
        "    msr     spsr_el2, x2",
        "    adr     x2, 5f",
        "    msr     elr_el2, x2",
        "    eret",
        "",
        "5:",
        "    mov     w1, w1", // FIXME: Truncate sp to 32bit, ignoring highmem
        "    mov     sp, x1",
        "",
        "    // load the start address and number of bytes in BSS section",
        "    ldr     x1, =__bss_start",
        "    mov     w1, w1", // FIXME: Truncate bss_start to 32bit, ignoring highmem
        "    ldr     x2, =__bss_length",
        "",
        "3:",
        "    // zero out the BSS section, 64-bits at a time",
        "    cbz     x2, 4f",
        "    str     xzr, [x1], #8",
        "    sub     x2, x2, #8",
        "    cbnz    x2, 3b",
        "",
        "4:",
        "    // jump to kmain, which shouldn't return. halt if it does",
        "    bl      kmain",
        "    b       1b",
        "    // align vectors to 2048 bytes",
        "    .align 11",
        "",
        ".global _vectors",
        "_vectors:",
        "// synchronous",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      exception_handler2",
        "b       __exception_restore_context",
        "",
        "// IRQ",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      irq_handler",
        "b       __exception_restore_context",
        "",
        "// FIQ",
        ".align  7",
        "mov     x0, #2",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "",
        "// SError",
        ".align  7",
        "mov     x0, #3",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "// synchronous",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      exception_handler2",
        "b       __exception_restore_context",
        "",
        "// IRQ",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      irq_handler",
        "b       __exception_restore_context",
        "",
        "// FIQ",
        ".align  7",
        "mov     x0, #2",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "",
        "// SError",
        ".align  7",
        "mov     x0, #3",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "// synchronous",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      exception_handler2",
        "b       __exception_restore_context",
        "",
        "// IRQ",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      irq_handler",
        "b       __exception_restore_context",
        "",
        "// FIQ",
        ".align  7",
        "mov     x0, #2",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "",
        "// SError",
        ".align  7",
        "mov     x0, #3",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "// synchronous",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      exception_handler2",
        "b       __exception_restore_context",
        "",
        "// IRQ",
        ".align  7",
        "// Make room on the stack for the exception context.",
        "sub     sp, sp, #16 * 17",
        "// Store all general purpose registers on the stack.",
        "stp     x0, x1, [sp, #16 * 0]",
        "stp     x2, x3, [sp, #16 * 1]",
        "stp     x4, x5, [sp, #16 * 2]",
        "stp     x6, x7, [sp, #16 * 3]",
        "stp     x8, x9, [sp, #16 * 4]",
        "stp     x10, x11, [sp, #16 * 5]",
        "stp     x12, x13, [sp, #16 * 6]",
        "stp     x14, x15, [sp, #16 * 7]",
        "stp     x16, x17, [sp, #16 * 8]",
        "stp     x18, x19, [sp, #16 * 9]",
        "stp     x20, x21, [sp, #16 * 10]",
        "stp     x22, x23, [sp, #16 * 11]",
        "stp     x24, x25, [sp, #16 * 12]",
        "stp     x26, x27, [sp, #16 * 13]",
        "stp     x28, x29, [sp, #16 * 14]",
        "// Add the exception link register (ELR_EL1) and the saved program status (SPSR_EL1).",
        "mrs     x1, ELR_EL1",
        "stp     lr, x1, [sp, #16 * 15]",
        "mrs     x1, SPSR_EL1",
        "mrs     x2, SP_EL0",
        "stp     x1, x2, [sp, #16 * 16]",
        "// x0 is the first argument for the function called through `handler`.",
        "mov     x0, sp",
        "bl      irq_handler",
        "b       __exception_restore_context",
        "",
        "// FIQ",
        ".align  7",
        "mov     x0, #2",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "",
        "// SError",
        ".align  7",
        "mov     x0, #3",
        "mrs     x1, esr_el1",
        "mrs     x2, elr_el1",
        "mrs     x3, spsr_el1",
        "mrs     x4, far_el1",
        "b       exception_handler",
        "",
        "// Jump back",
        "__exception_restore_context:",
        "ldp x19, x20, [sp, #16 * 16]",
        "msr SPSR_EL1, x19",
        "msr SP_EL0,   x20",
        "ldp lr,  x20, [sp, #16 * 15]",
        "msr ELR_EL1,  x20",
        "ldp x0,  x1,  [sp, #16 * 0]",
        "ldp x2,  x3,  [sp, #16 * 1]",
        "ldp x4,  x5,  [sp, #16 * 2]",
        "ldp x6,  x7,  [sp, #16 * 3]",
        "ldp x8,  x9,  [sp, #16 * 4]",
        "ldp x10, x11, [sp, #16 * 5]",
        "ldp x12, x13, [sp, #16 * 6]",
        "ldp x14, x15, [sp, #16 * 7]",
        "ldp x16, x17, [sp, #16 * 8]",
        "ldp x18, x19, [sp, #16 * 9]",
        "ldp x20, x21, [sp, #16 * 10]",
        "ldp x22, x23, [sp, #16 * 11]",
        "ldp x24, x25, [sp, #16 * 12]",
        "ldp x26, x27, [sp, #16 * 13]",
        "ldp x28, x29, [sp, #16 * 14]",
        "add sp,  sp,  #16 * 17",
        "eret",
        options(noreturn)
    )
}
